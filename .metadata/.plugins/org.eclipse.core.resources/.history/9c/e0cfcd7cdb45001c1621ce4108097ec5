import java.util.Iterator;

public class MyHashMap<Key,Value> {
	Object[] keyArray;
	Object[] valueArray;
	Object[] array;
	
	public MyHashMap() {
		this.keyArray = new Object[0];
		this.valueArray =  new Object[0];
		this.array =  new Object[0];
	}
	
	public void put(Key key,Value value) {

		
		//Ana dizilerle deðilde temp dizilerle iþlem yapýyoruz.
		
		Object[] tempArray = new Object[array.length+1];
		for (int i = 0; i < tempArray.length-1; i++) {
			tempArray[i] = array[i];
		}
		
		Object[] tempKeyArray = new Object[keyArray.length+1];
		for (int i = 0; i < tempKeyArray.length-1; i++) {
			tempKeyArray[i] = keyArray[i];
			
		}
		
		Object[] tempValueArray =  new Object[valueArray.length+1];
		for (int i = 0; i < tempValueArray.length-1; i++) {
			tempValueArray[i] = valueArray[i];
		}
		
		//Veri atamalarý bölümü
		tempArray[tempArray.length-1] = key + " = " + value;
		tempKeyArray[tempArray.length-1] = key;
		tempValueArray[tempValueArray.length-1] = value;
		
		
		
		//Temp Dizileri Oluþtururken +1 lediðimiz için diðer dizilerin boyutlarýný tempArray'in length ine tanýmlýyoruz.
		//Ekleme olduðunda Dizi boyutu +1 artýyor.
		array = new Object[tempArray.length];					
		for (int i = 0; i < tempArray.length; i++) {			
			array[i] = tempArray[i];
		}
		
		
		keyArray = new Object[tempKeyArray.length];					

		for (int i = 0; i < tempKeyArray.length; i++) {			
			keyArray[i] = tempKeyArray[i];
		}
		
		valueArray = new Object[tempValueArray.length];					

		for (int i = 0; i < tempValueArray.length; i++) {			
			valueArray[i] = tempValueArray[i];
		}
	
		
		
		
		
		
		
		
	}
	
	public void remove(Key key) {
		
		//Bu bölüm dizi  ve veri aktarýmý
		
		Object[] tempArray = new Object[array.length];
		for (int i = 0; i < tempArray.length; i++) {
			tempArray[i] = array[i];
		}
		
		Object[] tempKeyArray = new Object[keyArray.length];
		for (int i = 0; i < tempKeyArray.length; i++) {
			tempKeyArray[i] = keyArray[i];
			
		}
		
		Object[] tempValueArray =  new Object[valueArray.length];
		for (int i = 0; i < tempValueArray.length; i++) {
			tempValueArray[i] = valueArray[i];
		}
		
		//----------------------------------------------------------------
		
		
		//
		/*
		int x = 0;
		int y = -1;
		while (x < keyArray.length) {			
			//Key'in varlýðý sorgulanýyor.
			if (keyArray[x] == key) {								
				y = x;											
				break;
			} else {											
				x++;
				continue;
			}
		}
		*/
		
		
		int y = -1;
		for (int i = 0; i < keyArray.length; i++) {
			if (keyArray[i] == key) {								
				y = i;											
				break;
			} else {											
				continue;
			}
			
		}

		//Silinecek Data için dizilerin tekrar düzenlenme iþlemi
		//
		if (y != -1) {	
			keyArray = new Object[tempKeyArray.length - 1];
			int a = 0;
			for (int i = 0; i < keyArray.length + 1; i++) {	
				if (i == y) {
					continue;
				} else {
					keyArray[a] = tempKeyArray[i];
					a++;
				}
			}
			valueArray = new Object[tempValueArray.length - 1];
			a=0;
			for (int i = 0; i < valueArray.length + 1; i++) {		
				if (i == y) {
					continue;
				} else {
					valueArray[a] = tempValueArray[i];
					a++;
				}
			}
			array = new Object[tempArray.length - 1];
			a=0;
			for (int i = 0; i < array.length + 1; i++) {		
				if (i == y) {
					continue;
				} else {
					array[a] = tempArray[i];
					a++;
				}
			}
		}
		
		
		
 	}
	
	public void remove(Key key,Value value) {
		
		Object[] tempArray = new Object[array.length];
		for (int i = 0; i < tempArray.length; i++) {
			tempArray[i] = array[i];
		}
		
		Object[] tempKeyArray = new Object[keyArray.length];
		for (int i = 0; i < tempKeyArray.length; i++) {
			tempKeyArray[i] = keyArray[i];
			
		}
		
		Object[] tempValueArray =  new Object[valueArray.length];
		for (int i = 0; i < tempValueArray.length; i++) {
			tempValueArray[i] = valueArray[i];
		}
		
		int x = 0;
		int y = -1;
		while (x < keyArray.length) {								
			if (keyArray[x] == key && valueArray[x] == value) {								
				y = x;											
				break;
			} else {											
				x++;
				continue;
			}
		}

		if (y != -1) {											
			keyArray = new Object[tempKeyArray.length - 1];
			int a = 0;
			for (int i = 0; i < keyArray.length + 1; i++) {		
				if (i == y) {
					continue;
				} else {
					keyArray[a] = tempKeyArray[i];
					a++;
				}
			}
			valueArray = new Object[tempValueArray.length - 1];
			a=0;
			for (int i = 0; i < valueArray.length + 1; i++) {		
				if (i == y) {
					continue;
				} else {
					valueArray[a] = tempValueArray[i];
					a++;
				}
			}
			array = new Object[tempArray.length - 1];
			a=0;
			for (int i = 0; i < array.length + 1; i++) {		
				if (i == y) {
					continue;
				} else {
					array[a] = tempArray[i];
					a++;
				}
			}
		}
	}
	
	public Object get(Key key) {
		int tempKeyIndex = 0;
		
		//int count = 0; //Buradaki count Hashmaplerde bi key value girilen en son deðeri tutar.O bilgiye ulaþmak için kullanýlacaktýr. Planlandý ama yapýlamadý.
		
		for (int keyIndex = 0; keyIndex < array.length; keyIndex++) {
			if (key == keyArray[keyIndex]) {
				//Veriyi çekebilmek için ilgili anahtarýmýzý tempkey'e gönderdik.Ve döngüden çýktýk.
				tempKeyIndex = keyIndex;
				break;
			}
		}
		//tempKeyIndex'i döngümüzdeki index ile eþitleyek verinin hangi indexde oldugunu belirleyip veriyi döndürüyoruz.
		for (int valueIndex = 0; valueIndex < valueArray.length; valueIndex++) {
			if (tempKeyIndex==valueIndex) {
				return valueArray[valueIndex];
			}
			
		}
		return "Data Not Found Exception";
		
		
	}

	
	public int size() {
		return array.length;
	}
	
	public void clear() {
		array = new Object[0];
		keyArray = new Object[0];
		valueArray = new Object[0];
	}
	
	public void list() {
		for (int i = 0; i < array.length; i++) {
			System.out.println(array[i]);
			
		}
	}
	
}
