package com.appsdeveloperblog.photoapp.api.account.features.accountTypes.commands.create;

import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;
import org.springframework.beans.BeanUtils;

//Bunun bir aggregate fonksiyon oldugunu göstermek için bu anotasyonu eklenir.

@Aggregate
public class CreateAccountTypeAggregate {

	public CreateAccountTypeAggregate() {

	}

	// Komut olduğundan emin olmak için commandhandler yerleştirmemiz gereklidir.

	@CommandHandler
	public CreateAccountTypeAggregate(CreateAccountTypeCommand createAccountTypeCommand) {

		if (createAccountTypeCommand.getPrice() < 0) {
			throw new IllegalArgumentException("fiyat 0'dan küçük olamaz.");
		}

		// Validation kodu da yazılabilir ama cok tercih edilmemesi gerekir.

		// business Kodu yazılır.

		// Event fire

		// Event varken dataların hepsini atmak zorunda değiliz.
		// Dosyaları çevirmek için modelMapper kullanabiliriz veya builder
		// kullanabiliriz.
		// 3. bir eşleştirme ancak herşey %100 aynı ise bean utils alternatifi
		// kullanılabilir.
		AccountTypeCreatedEvent accountTypeCreatedEvent = new AccountTypeCreatedEvent();
		BeanUtils.copyProperties(createAccountTypeCommand, accountTypeCreatedEvent);
		
		AggregateLifecycle.apply(accountTypeCreatedEvent);

	}

}
